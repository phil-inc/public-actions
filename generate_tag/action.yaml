# This action expects the git event data to be stored as an environment variable by the calling workflow

name: phil_generate_tag
outputs:
  tag:
    description: "Generated tag based on Git event"
    value: ${{ steps.generate-image-tag.outputs.tag }}
runs:
  using: "composite"
  steps:
    - name: If the ref is a tag, remove the leading v
      if: ${{ github.ref_type == 'tag' && startsWith(github.ref_name, 'v') }}
      run: echo "::set-output name=TAG::$( echo \"${{ github.ref_name }}\" | sed -e 's/v//1' )"
      shell: bash

    - name: If the ref is feature branch, lowercase it and replace all special chars with hyphens
      if: startsWith(${{ github.ref_name }}, 'feature/')
      run: echo "::set-output name=TAG::$( echo \"${{ github.ref_name }}\" | sed -e 's/feature\///g' -e 's/_/-/g' | awk '{print tolower($0)}')"
      shell: bash

    - name: If the ref is master/relase, set the tag to the first 8 of the commit sha
      if: ${{ github.ref_name == github.event.repository.default_branch }}
      run: echo "::set-ouput name=TAG::${\"${{ github.sha }}\":8}"
      shell: bash

    # - id: generate-image-tag
    #   shell: bash
    #   run: |
    #     EVENT_TYPE=$(echo $EVENT_CONTEXT | jq -r .ref | awk -F/ '{ print $2}')
    #     REF=$(echo $EVENT_CONTEXT | jq -r .ref | sed -e 's/\// /2' | awk '{print $2}')
    #     if [ "$EVENT_TYPE" = "tags" ]; then
    #       echo "::set-output name=tag::$(echo $REF | sed -e 's/v//1')"
    #       exit 0
    #     fi
    #     TAG=${{ inputs.sha }}
    #     DEFAULT_BRANCH=$(echo $EVENT_CONTEXT | jq -r .repository.default_branch)
    #     if [ "$REF" != "$DEFAULT_BRANCH" ]; then
    #       if [[ $REF = feature/* ]]; then
    #         TAG=$(echo "$REF" | sed -e 's/feature\///g' -e 's/_/-/g' | awk '{print tolower($0)}')-$TAG
    #       else
    #         echo "::set-output name=tag::''"
    #         exit 0
    #       fi
    #     fi
    #     echo "::set-output name=tag::$(echo $TAG)"
    #     exit 0