name: phil_terragrunt_ci
on:
  workflow_call:
env:
  tf_version: 'latest'
  tg_version: 'latest'
  tf_working_dir: '.'

jobs:
  terragrunt_plan:
    name: 'terragrunt plan'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: 'Terragrunt Format'
        id: fmt
        uses: the-commons-project/terragrunt-github-actions@master
        continue-on-error: true
        with:
          tf_actions_version: ${{ env.tf_version }}
          tg_actions_version: ${{ env.tg_version }}
          tf_actions_binary: 'terraform'
          tf_actions_subcommand: 'fmt'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Terragrunt Init'
        id: init
        uses: the-commons-project/terragrunt-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tg_actions_version: ${{ env.tg_version }}
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Terragrunt Validate'
        id: validate
        uses: the-commons-project/terragrunt-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tg_actions_version: ${{ env.tg_version }}
          tf_actions_binary: 'terraform'
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Terragrunt Plan'
        uses: the-commons-project/terragrunt-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tg_actions_version: ${{ env.tg_version }}
          tf_actions_subcommand: 'plan -out plan.json'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: 'Output to File'
      #   run: terragrunt show -json plan > plan.json
      
      - name: 'Upload Plan'
        uses: actions/upload-artifact@v3
        with:
          name: plan-${{ github.run_id }}
          path: ./plan.json
          if-no-files-found: error
          retention-days: 1

      - name: 'Github Comment'
        uses: actions/github-script@v6
        if: ${{ github.event_name }} == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get PR comments
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            // Parse for this comment
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terragrunt Format & Style')
            })

            // Create output for this comment
            const output = `#### Terragrunt Format & Style \`${{ steps.fmt.outcome }}\`
            #### Terragrunt Initialization \`${{ steps.init.outcome }}\`
            #### Terragrunt Validation \`${{ steps.validate.outcome }}\`
            #### Terragrunt Plan \'${{ steps.plan.outcome }}\'
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`\n

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // If this comment already exists, update it
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
  
  terragrunt_apply:
    name: 'terragrunt plan'
    runs-on: ubuntu-latest
    steps:
      - name: 'Download Plan'
        uses: actions/download-artifact@v3
        with:
          name: plan-${{ github.run_id }}
          path: ./plan.json
      - name: 'Terragrunt Apply'
        uses: the-commons-project/terragrunt-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tg_actions_version: ${{ env.tg_version }}
          tf_actions_subcommand: 'apply ./plan.json'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

