name: phil_terragrunt_ci

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      TF_TOKEN:
        required: false
      TERRAFORM_GH_SSH:
        required: false
    inputs:
      directories:
        description: Directories to execute jobs in
        type: string
        default: "."
      apply:
        description: If true, perform apply
        type: boolean
        required: false
        default: false

jobs:
  terragrunt_ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ${{fromJson(inputs.directories)}}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}
          terraform_wrapper: false
          
      - name: Setup Terragrunt
        run: |
          sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v0.38.12/terragrunt_linux_amd64"
          sudo chmod +x /bin/terragrunt
          terragrunt -v

      - name: Setup SSH keys & known_hosts
        env:
          PRIVATE_KEY: ${{ secrets.TERRAFORM_GH_SSH }}
        run: |
          SSH_PATH="$HOME/.ssh"

          mkdir -p "$SSH_PATH"
          touch "$SSH_PATH/known_hosts"

          echo "$PRIVATE_KEY" > "$SSH_PATH/id_rsa"

          chmod 700 "$SSH_PATH"
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          chmod 600 "$SSH_PATH/known_hosts"
          chmod 600 "$SSH_PATH/id_rsa"

          eval $(ssh-agent)
          ssh-add "$SSH_PATH/id_rsa"

      - name: Terragrunt init
        id: init
        run: terragrunt run-all init
        env:
          TERRAGRUNT_WORKING_DIR: ${{ matrix.directory }}

      - name: Terragrunt fmt
        id: fmt
        run: terragrunt run-all fmt -check
        env:
          TERRAGRUNT_WORKING_DIR: ${{ matrix.directory }}

      - name: Terragrunt plan
        id: plan
        run: terragrunt run-all plan -no-color -out=PLAN
        env:
          TERRAGRUNT_WORKING_DIR: ${{ matrix.directory }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}

      - name: Terragrunt apply
        id: apply
        if: ${{ inputs.apply }}
        run: terragrunt run-all apply PLAN
        env:
          TERRAGRUNT_WORKING_DIR: ${{ matrix.directory }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}

      - uses: actions/github-script@v6
        if: ${{ github.event_name }} == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get PR comments
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            // Parse for this comment
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('${{ matrix.directory }}')
            })

            // Create output for this comment
            const output = `### Directory: ${{ matrix.directory }}
            #### Terragrunt Format & Style \`${{ steps.fmt.outcome }}\`
            #### Terragrunt Initialization \`${{ steps.init.outcome }}\`
            #### Terragrunt Plan \`${{ steps.plan.outcome }}\`
            <details><summary>Plan Output</summary>

            \`\`\`\n
            ${{ steps.plan.outputs.stdout }}
            \`\`\`\n

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // If this comment already exists, update it
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
