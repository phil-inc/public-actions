name: phil_terraform_ci
on:
  workflow_call:
    inputs:
      directories:
        description: "Execute in these directories"
        type: string
        default: "."
  

jobs:
  terraform_ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ${{fromJson(inputs.directories)}}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        run: terraform -chdir=${{ matrix.directory }}  fmt -check

      - name: Terraform init
        id: init
        run: terraform -chdir=${{ matrix.directory }} init

      - name: Terraform validate
        id: validate
        run: terraform -chdir=${{ matrix.directory }} validate  -no-color

      - uses: actions/github-script@v6
        if: ${{ github.event_name }} == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get PR comments
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            // Parse for this comment
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('${{ matrix.directory }}')
            })

            // Create output for this comment
            const output = `### ${{ matrix.directory }}
            #### Terraform Format & Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`\n

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // If this comment already exists, update it
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
